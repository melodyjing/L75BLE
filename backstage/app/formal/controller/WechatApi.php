<?php


namespace app\formal\controller;

use app\admin\model\Custom;
use app\admin\model\Device;
use app\admin\model\Deviceinfo;
use app\admin\model\Guide;
use app\admin\model\Problem;
use app\admin\model\Record;
use app\BaseController;
use think\facade\Db;
use think\facade\Filesystem;
use think\facade\Request;
use think\facade\Validate;
use wechat\Wechat;
use wechat\WXBizDataCrypt;
use wechat_pay\WechatPay;

class WechatApi extends BaseController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->url='https://'.request()->host();
        $wechat_config=Db::name('wechat_config')->where(['id'=>1])->find();
        $this->appid=$wechat_config['appid'];
        $this->appSecret=$wechat_config['appsecret'];
    }

    /**
     * 上传图片
     */
    public function upload(){
        $data=request()->param();
        $folder=isset($data['folder'])?$data['folder']:'wechat';
        $file = request()->file('file');
        if(!Validate::fileSize($file,1024 * 1024 * 5)){
            $ajaxarr=['code'=>400,'msg'=>'图片过大,请勿超过5M'];
        }else if(!Validate::fileExt($file,'jpeg,jpg,png,gif,ico')){
            $ajaxarr=['code'=>400,'msg'=>'图片格式错误'];
        }else{
            $info = Filesystem::disk('public')->putFile('upload/'.$folder,$file);
            $info=str_replace('\\','/',$info);
            $img_path=$this->url.'/storage/'.$info;
            $img_src='/storage/'.$info;
            $ajaxarr=['code'=>200,'src'=>$img_path,'img_src'=>$img_src];
        }
        return json($ajaxarr);
    }

    /**
     * 获取openid
     */
    public function getOpenid(){
        $data=request()->param();
        $validate = Validate::rule([
            'code|授权码' => 'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $wechat=new Wechat($this->appid,$this->appSecret);
            $ajaxarr=$wechat->get_openid($data['code']);
            if(isset($ajaxarr['openid']) && $ajaxarr['openid'] != ''){
                if(!Db::name('custom')->where(['openid'=>$ajaxarr['openid']])->value('id')){
                    Db::name('custom')->insertGetId(['openid'=>$ajaxarr['openid'],'add_time'=>time()]);
                }
            }
        }
        return json($ajaxarr);
    }

    /**
     * 存储客户信息
     * 存储客户头像昵称等
     */
    public function saveCustom(){
        $data=request()->param();
        $validate = Validate::rule([
            'openid|微信客户唯一标识' => 'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $type=isset($data['type'])?$data['type']:1;
            if($type == 1) {
                $arr['nickName'] = isset($data['nickname']) ? $data['nickname'] : '';
                $arr['avatar'] = isset($data['avatar']) ? $data['avatar'] : '';
                $id = Db::name('custom')->where(['openid' => $data['openid']])->value('id');
                if ($id) {
                    $arr['edit_time'] = time();
                    $add_id = Db::name('custom')->where(['id' => $id])->save($arr);
                } else {
                    $arr['openid'] = $data['openid'];
                    $arr['add_time'] = time();
                    $add_id = Db::name('custom')->insertGetId($arr);
                }
            }else{
                $address=isset($data['address'])?$data['address']:'';
                $add_id=Custom::where(['openid'=>$data['openid']])->save(['address'=>$address,'edit_time'=>time()]);
            }
            if($add_id){
                $ajaxarr=['code'=>200,'msg'=>'储存成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'储存失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 主页
     */
    public function index(){
        $data=request()->param();
        $validate = Validate::rule([
            'openid|微信客户唯一标识' => 'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $page=isset($data['page'])?$data['page']:1;
            $limit=10;
            $list=Device::where(['openid'=>$data['openid'],'status'=>1])->order(['sort'=>'desc','id'=>'desc'])->page($page,$limit)->select()->toArray();
            foreach ($list as $k=>$vo){
                switch($vo['type']){
                    case 1:
                        $list[$k]['type_title']='卧室';
                        break;
                    case 2:
                        $list[$k]['type_title']='客厅';
                        break;
                    case 3:
                        $list[$k]['type_title']='厨房';
                        break;
                    case 4:
                        $list[$k]['type_title']='阳台';
                        break;
                    case 5:
                        $list[$k]['type_title']='办公室';
                        break;
                    case 6:
                        $list[$k]['type_title']='其它';
                        break;
                    default:
                        $list[$k]['type_title']='';
                        break;
                }
            }
            $nickname=Custom::where(['openid'=>$data['openid']])->value('nickName')?Custom::where(['openid'=>$data['openid']])->value('nickName'):'';
            
            $ajaxarr=['code'=>200,'list'=>$list,'nickname'=>$nickname];
        }
        return json($ajaxarr);
    }

    /**
     * 添加设备
     */
    public function add_device(){
        $data=request()->param();
        $type=isset($data['type'])?$data['type']:1;
        if($type == 1){
            $validate = Validate::rule([
                'openid|微信客户唯一标识' => 'require'
            ]);
            if (!$validate->check($data)) {
                $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
            } else {
                $my_device = Device::where(['openid' => $data['openid'], 'status' => 1])->field('mac')->select();
                $ajaxarr = ['code' => 200, 'device_list' => $my_device];
            }
            return json($ajaxarr);
        }else {
            $validate = Validate::rule([
                'openid|微信客户唯一标识' => 'require',
                'mac|设备' => 'require',
                'name|设备名称' => 'require'
            ]);
//             if (!$validate->check($data)) {
//                 $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
//             } else {
//                 $type = isset($data['type_id']) ? $data['type_id'] : 1;
// //                if(Device::where(['mac'=>$data['mac'],'status'=>1])->find()){
// //                    $ajaxarr = ['code' => 400, 'msg' => '此设备已被他人添加'];
// //                }else {
//                 $add_id = Device::insertGetId(['openid' => $data['openid'], 'mac' => $data['mac'], 'name' => $data['name'], 'type' => $type, 'add_time' => time()]);
//                 if ($add_id) {
//                     if(Deviceinfo::where(['mac'=>$data['mac']])->find()){
//                   $ajaxarr = ['code' => 200, 'msg' => '添加成功'];
//                     }else{
//                           $add_id = Deviceinfo::insertGetId(['openid' => '', 'mac' => $data['mac'], 'name' => $data['name'], 'type' => $type, 'add_time' => time()]);
//                 if ($add_id) {
//                     $this->create_qrcode($add_id);
//                     $ajaxarr = ['code' => 200, 'msg' => '添加成功'];
//                 } else {
//                     $ajaxarr = ['code' => 400, 'msg' => '添加失败'];
//                 }
                        
//                     }
                
//                 } else {
//                     $ajaxarr = ['code' => 400, 'msg' => '添加失败'];
//                 }
                
               if (!$validate->check($data)) {
                $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
            } else {
                $type = isset($data['type_id']) ? $data['type_id'] : 1;
                $add_id = Device::insertGetId(['openid' => $data['openid'], 'mac' => $data['mac'], 'name' => $data['name'], 'type' => $type, 'add_time' => time()]);
                if ($add_id) {
                    $this->create_qrcode($add_id);
                    $ajaxarr = ['code' => 200, 'msg' => '添加成功'];
                } else {
                    $ajaxarr = ['code' => 400, 'msg' => '添加失败'];
                }
                
//                }
            }
        }
        return json($ajaxarr);
    }

    /**
     * 修改设备
     */
    public function edit_device(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require',
            'name|设备名称'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $type=isset($data['type'])?$data['type']:1;
            $save_id=Device::where(['id'=>$data['id']])->save(['name'=>$data['name'],'type'=>$type,'edit_time'=>time()]);
            if($save_id){
                $ajaxarr=['code'=>200,'msg'=>'编辑成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'编辑失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 设备顶部
     */
    public function device_sort(){
        $data=request()->param();
        $validate = Validate::rule([
            'openid|用户唯一标识'=>'require',
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $sort=Device::where(['openid'=>$data['openid'],'status'=>1])->order('sort desc')->value('sort')?Device::where(['openid'=>$data['openid'],'status'=>1])->order('sort desc')->value('sort'):0;
            $save_id=Device::where(['id'=>$data['id']])->save(['sort'=>($sort+1),'edit_time'=>time()]);
            if($save_id){
                $ajaxarr=['code'=>200,'msg'=>'排序成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'排序失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 删除设备
     */
    public function del_device(){
        $data=request()->param();
        $validate = Validate::rule([
            'openid|用户唯一标识'=>'require',
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $save_id=Device::where(['id'=>$data['id'],'openid'=>$data['openid']])->save(['status'=>0,'del_time'=>time()]);
            if($save_id){
                $ajaxarr=['code'=>200,'msg'=>'删除成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'删除失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 设备详情
     */
    public function device_info(){
      
        $data=request()->param();
        
        
         //$device_info=Device::where(['id'=>$data['id']])->find();
        //       dump($data);
        //   $device_info= Device::alias('a')->where(['id'=>$data['id']])->join('deviceinfo b', 'a.mac = b.mac')->field('a.*')->find();
        
   
          //$device_info= Device::where(['id'=>$data['id']])->alias('a')->join('Deviceinfo b ','b.mac= a.mac')->select();
           
          // $device_info=Db::table('Device')->alias('a')->join('Deviceinfo b ','b.mac= a.mac')->select();
           

            //dump($device_info);exit;

        
        
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require',
            'openid|用户唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $device_info=Device::where(['id'=>$data['id']])->find();
            
             
           
            
            $device_info['qrcode_src']=$device_info['qrcode_src']?$this->url.$device_info['qrcode_src']:'';
            
              
//            if(!$device_info['qrcode_src'] || $device_info['qrcode_src'] == ''){
            $this->create_qrcode($data['id']);
//            }

           $device_info['day']=intval((time()-strtotime($device_info['add_time']))/86400)+1;
            
            

            //获取设备现在返回的年
            $year_list=Record::where(['device_id'=>$data['id']])->order('year desc')->group('year')->column('year')?Record::where(['device_id'=>$data['id']])->order('year desc')->group('year')->column('year'):[date('Y')];

            $list=Device::where(['openid'=>$data['openid'],'status'=>1])->order(['sort'=>'desc','id'=>'desc'])->select()->toArray();
            $data=request()->param();
            $year=isset($data['year'])?$data['year']:date('Y');
            $record=[];
            for($i=1;$i<=12;$i++){
                $record[]=Record::where(['device_id'=>$data['id'],'year'=>$year,'month'=>$i])->value('num')?Record::where(['device_id'=>$data['id'],'year'=>$year,'month'=>$i])->value('num'):0;
            }


            $ajaxarr=['code'=>200,'device_info'=>$device_info,'list'=>$list,'record'=>$record,'year_list'=>$year_list];
        }
        return json($ajaxarr);
    }

    /**
     * 生成微信小程序B二维码
     */
    public function create_qrcode($id){
        $qrcode_src = './storage/qrcode/' . $id . '.png';
        $query = array(
            'page'=>'pages/index/show',
            'scene'=>$id
        );
        $config = Db::name('wechat_config')->where(['id' => 1])->find();
        $wechat = new Wechat($config['appid'], $config['appsecret']);
        $token = Db::name('wechat_token')->where('end_time', '>', time())->value('token');
        if (!$token) {
            $res = $wechat->getAccessToken();
            if (isset($res['errcode']) && $res['errcode'] != 0) {
                $ajaxarr = ['code' => 400, 'msg' => $res['errmsg']];
            } else {
                $token = $res['access_token'];
                Db::name('wechat_token')->insertGetId(['token' => $token, 'end_time' => strtotime('+ 5400 seconds')]);
                $result = $wechat->getWxQrcode($token,json_encode($query,JSON_UNESCAPED_UNICODE));
                $res=json_decode($result,true);
                if(isset($res['errcode'])){
                    $res['errMsg']=isset($res['errMsg'])?$res['errMsg']:'';
                    $ajaxarr=['code'=>400,'msg'=>'二维码生成失败'.$res['errMsg']];
                }else {
                    file_put_contents($qrcode_src, $result);
                    $qrcode_src = substr($qrcode_src, 1);
                    Device::where(['id' => $id])->save(['qrcode_src' => $qrcode_src,'edit_time'=>time()]);
                }
            }
        } else {
            $result = $wechat->getWxQrcode($token,json_encode($query,JSON_UNESCAPED_UNICODE));
            $res=json_decode($result,true);
            if(isset($result['errcode'])){
                $res['errmsg']=isset($res['errmsg'])?$res['errmsg']:'';
                $ajaxarr=['code'=>400,'msg'=>'二维码生成失败'.$res['errmsg']];
            }else {
                file_put_contents($qrcode_src, $result);
                $qrcode_src = substr($qrcode_src, 1);
                Device::where(['id' => $id])->save(['qrcode_src' => $qrcode_src,'edit_time'=>time()]);
            }
        }
    }


    /**
     * 设备详情表格分析
     */
    public function analysis(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $year=isset($data['year'])?$data['year']:date('Y');
            $record=[];
            for($i=1;$i<=12;$i++){
                $record[]=Record::where(['device_id'=>$data['id'],'year'=>$year,'month'=>$i])->value('num')?Record::where(['device_id'=>$data['id'],'year'=>$year,'month'=>$i])->value('num'):0;
            }
            $ajaxarr=['code'=>200,'record'=>$record];
        }
        return json($ajaxarr);
    }

    /**
     * 定时设置
     * type=1 设置重复  type=2  时间
     */
    public function timing(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $type=isset($data['type'])?$data['type']:1;
            if($type == 1){
                $validate = Validate::rule([
                    'is_set|重复'=>'require'
                ]);
                if (!$validate->check($data)) {
                    $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
                } else {
                    $save_id = Device::where(['id' => $data['id']])->save(['is_set' => $data['is_set'], 'edit_time' => time()]);
                    if ($save_id) {
                        $ajaxarr = ['code' => 200, 'msg' => '设置成功'];
                    } else {
                        $ajaxarr = ['code' => 400, 'msg' => '设置失败'];
                    }
                }
            }else{
                $validate = Validate::rule([
                    'startime|开始时间'=>'require',
                    'endtime|结束时间'=>'require'
                ]);
                if (!$validate->check($data)) {
                    $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
                } else {
                    $save_id = Device::where(['id' => $data['id']])->save(['startime' => $data['startime'], 'endtime' => $data['endtime'], 'edit_time' => time()]);
                    if ($save_id) {
                        $ajaxarr = ['code' => 200, 'msg' => '设置成功'];
                    } else {
                        $ajaxarr = ['code' => 400, 'msg' => '设置失败'];
                    }
                }
            }
        }
        return json($ajaxarr);
    }

    /**
     * 开启关闭定时
     */
    public function set_timing(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $is_timing=isset($data['is_timing'])?$data['is_timing']:0;
            $save_id=Device::where(['id'=>$data['id']])->save(['is_timing'=>$is_timing,'edit_time'=>time()]);
            if($save_id){
                $ajaxarr=['code'=>200,'msg'=>'操作成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'操作失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 记录设备总数量
     */
    public function total_num(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $num=isset($data['num'])?$data['num']:0;
            $save_id=Device::where(['id'=>$data['id']])->save(['num'=>$num,'edit_time'=>time()]);
            if($save_id){
                $mac=Device::where(['id'=>$data['id']])->value('mac');
                Device::where(['mac'=>$mac])->save(['num'=>$num,'edit_time'=>time()]);
                $ajaxarr=['code'=>200];
            }else{
                $ajaxarr=['code'=>400];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 记录灭蚊数量
     */
    public function record(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $year=isset($data['year'])?$data['year']:date('Y');
            $month=isset($data['month'])?explode(',',$data['month']):[];
            for($i=0;$i<12;$i++){
                $num=isset($month[$i])?$month[$i]:0;
                if(Record::where(['year'=>$year,'device_id'=>$data['id'],'month'=>($i+1)])->find()){
                    Record::where(['year'=>$year,'device_id'=>$data['id'],'month'=>($i+1)])->save(['num'=>$num,'edit_time'=>time()]);
                }else{
                    Record::insertGetId(['year'=>$year,'device_id'=>$data['id'],'month'=>($i+1),'num'=>$num,'add_time'=>time()]);
                }
            }
        }
    }

    /**
     * 记录单月灭蚊数量
     */
    public function month_record(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $year=isset($data['year'])?$data['year']:date('Y');
            $num=isset($data['num'])?$data['num']:0;
            $month=isset($data['month'])?$data['month']:date('m');
            if(Record::where(['year'=>$year,'device_id'=>$data['id'],'month'=>$month])->find()){
                Record::where(['year'=>$year,'device_id'=>$data['id'],'month'=>$month])->save(['num'=>$num,'edit_time'=>time()]);
            }else{
                Record::insertGetId(['year'=>$year,'device_id'=>$data['id'],'month'=>$month,'num'=>$num,'add_time'=>time()]);
            }
            $ajaxarr=['code'=>200];
        }
        return json($ajaxarr);
    }



    /**
     * 常见问题与操作指南
     */
    public function guide(){
        $data=request()->param();
        $type=isset($data['type'])?$data['type']:1;
        if($type == 1) {
            $page = isset($data['page']) ? $data['page'] : 1;
            $limit = 10;
            $list = Guide::where(['type' => 1, 'status' => 1])->order(['sort' => 'desc', 'id' => 'desc'])->page($page, $limit)->select()->toArray();
        }else{
            $list = Guide::where(['type' => 2, 'status' => 1])->order(['sort' => 'desc', 'id' => 'desc'])->select()->toArray();
        }
        $ajaxarr=['code'=>200,'list'=>$list];
        return json($ajaxarr);
    }

    /**
     * 常见问题详情
     */
    public function guide_detail(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|常见问题唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $guide_info=Guide::where(['id'=>$data['id']])->find();
            $guide_info['content']=str_replace('<img src="/storage','<img src="'.$this->url.'/storage',$guide_info['content']);
            $ajaxarr=['code'=>200,'guide_info'=>$guide_info];
        }
        return json($ajaxarr);
    }

    /**
     * 问题反馈
     */
    public function feedback(){
        $data=request()->param();
        $validate = Validate::rule([
            'openid|用户唯一标识'=>'require',
            'title|反馈内容'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $data['img_src']=isset($data['img_src'])?trim($data['img_src'],','):'';
            $data['contact']=isset($data['contact'])?$data['contact']:'';
            $add_id=Problem::insertGetId(['openid'=>$data['openid'],'title'=>$data['title'],'img_src'=>$data['img_src'],'contact'=>$data['contact'],'add_time'=>time()]);
            if($add_id){
                $ajaxarr=['code'=>200,'msg'=>'反馈成功'];
            }else{
                $ajaxarr=['code'=>400,'msg'=>'反馈失败'];
            }
        }
        return json($ajaxarr);
    }

    /**
     * 恢复出厂设置
     */
    public function factory_set(){
        $data=request()->param();
        $validate = Validate::rule([
            'id|设备唯一标识'=>'require'
        ]);
        if (!$validate->check($data)) {
            $ajaxarr = ['code' => 100, 'msg' => $validate->getError()];
        } else {
            $save_id=Device::where(['id'=>$data['id']])->save(['is_timing'=>0,'num'=>0,'is_set'=>0,'startime'=>'08:00','endtime'=>'20:00','edit_time'=>time()]);
            if($save_id){
                Record::where(['device_id'=>$data['id']])->delete();
            }
        }
    }

}
